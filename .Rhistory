return(eval(parse(text = exp)))   #evalue l'expression et calcule la valeur de la fonction
}
#calcul de la derivee nieme en a
derv = 0
h = 1e-6
for(i in 0:n){
derv = derv + ((-1)^i * combinaison(i, n) * f(a + (n-i)*h)) / h^n  #derivee d'ordre n
}
return(derv)
}
polyprint(taylor('log(x)', n=3, a=1, pol=TRUE))
f_n_deriv <- function(func, n = 0, a = 0)
{
#derivee a l'ordre n au point a
#fonction f à deriver
f <- function(x)
{
#If you use gsub('x', 5, 'exp(x)'), it will replace all the ‘x’ in the string, including the one in ‘exp’.
#So, ‘exp(x)’ would become ‘e5p(5)’, which is not what you want.
#On the other hand, if you use `gsub(‘\bx\b’, 5, ‘exp(x)’), it will only replace the ‘x’ that
#is a whole word (i.e., it is not preceded or followed by another alphabetical character).
#So, ‘exp(x)’ will become ‘exp(5)’
exp <- gsub('\\bx\\b', x, func)  #remplace tous les x dans l'expression par la valeur de x
return(eval(parse(text = exp)))   #evalue l'expression et calcule la valeur de la fonction
}
#calcul de la derivee nieme en a
derv = 0
h = 0.001
for(i in 0:n){
derv = derv + ((-1)^i * combinaison(i, n) * f(a + (n-i)*h)) / h^n  #derivee d'ordre n
}
return(derv)
}
#use derivatives and polynomials
taylor <- function(func, x=0, n = 0, a = 0, pol=FALSE){
k <-  0
taylor <-  0
polynomial <- c()
while (f_n_deriv(func, n=k, a=a) != Inf & f_n_deriv(func, n=k, a=a) != -Inf & k<=n)
{
if(!pol){
taylor <-  taylor +  (f_n_deriv(func, n=k, a=a) * ((x-a)^k))/factorial(k)
}
else{
polynomial <- polyadd(polynomial, f_n_deriv(func, n=k, a=a) * (polypow(c(1, -a),k))/factorial(k))
}
k <- k+1
}
if(!pol){
return(taylor)
}
else{
return(polynomial)
}
}
polyprint(taylor('log(x)', n=3, a=1, pol=TRUE))
polyprint(taylor('log(x)', n=6, a=1, pol=TRUE))
polyprint(taylor('cos(x)', n=6, a=1, pol=TRUE))
f_n_deriv <- function(func, n = 0, a = 0)
{
#derivee a l'ordre n au point a
#fonction f à deriver
f <- function(x)
{
#If you use gsub('x', 5, 'exp(x)'), it will replace all the ‘x’ in the string, including the one in ‘exp’.
#So, ‘exp(x)’ would become ‘e5p(5)’, which is not what you want.
#On the other hand, if you use `gsub(‘\bx\b’, 5, ‘exp(x)’), it will only replace the ‘x’ that
#is a whole word (i.e., it is not preceded or followed by another alphabetical character).
#So, ‘exp(x)’ will become ‘exp(5)’
exp <- gsub('\\bx\\b', x, func)  #remplace tous les x dans l'expression par la valeur de x
return(eval(parse(text = exp)))   #evalue l'expression et calcule la valeur de la fonction
}
#calcul de la derivee nieme en a
derv = 0
h = 0.01
for(i in 0:n){
derv = derv + ((-1)^i * combinaison(i, n) * f(a + (n-i)*h)) / h^n  #derivee d'ordre n
}
return(derv)
}
f <- function(func, x)
{
#If you use gsub('x', 5, 'exp(x)'), it will replace all the ‘x’ in the string, including the one in ‘exp’.
#So, ‘exp(x)’ would become ‘e5p(5)’, which is not what you want.
#On the other hand, if you use `gsub(‘\bx\b’, 5, ‘exp(x)’), it will only replace the ‘x’ that
#is a whole word (i.e., it is not preceded or followed by another alphabetical character).
#So, ‘exp(x)’ will become ‘exp(5)’
exp <- gsub('\\bx\\b', x, func)  #remplace tous les x dans l'expression par la valeur de x
return(eval(parse(text = exp)))   #evalue l'expression et calcule la valeur de la fonction
}
#use derivatives and polynomials
taylor <- function(func, x=0, n = 0, a = 0, pol=FALSE){
k <-  0
taylor <-  0
polynomial <- c()
while (f_n_deriv(func, n=k, a=a) != Inf & f_n_deriv(func, n=k, a=a) != -Inf & k<=n)
{
if(!pol){
taylor <-  taylor +  (f_n_deriv(func, n=k, a=a) * ((x-a)^k))/factorial(k)
}
else{
polynomial <- polyadd(polynomial, f_n_deriv(func, n=k, a=a) * (polypow(c(1, -a),k))/factorial(k))
}
k <- k+1
}
if(!pol){
return(taylor)
}
else{
return(polynomial)
}
}
polyprint(taylor('cos(x)', n=6, a=1, pol=TRUE))
polyprint(taylor('cos(x)', n=6, a=0, pol=TRUE))
polyprint(taylor('cos(x)', n=6, a=0, x=0))
polyprint(taylor('cos(x)', n=6, a=0, x=3.14))
polyprint(taylor('cos(x)', n=6, a=3, x=3.14))
f_n_deriv <- function(func, n = 0, a = 0)
{
#derivee a l'ordre n au point a
#fonction f à deriver
f <- function(x)
{
#If you use gsub('x', 5, 'exp(x)'), it will replace all the ‘x’ in the string, including the one in ‘exp’.
#So, ‘exp(x)’ would become ‘e5p(5)’, which is not what you want.
#On the other hand, if you use `gsub(‘\bx\b’, 5, ‘exp(x)’), it will only replace the ‘x’ that
#is a whole word (i.e., it is not preceded or followed by another alphabetical character).
#So, ‘exp(x)’ will become ‘exp(5)’
exp <- gsub('\\bx\\b', x, func)  #remplace tous les x dans l'expression par la valeur de x
return(eval(parse(text = exp)))   #evalue l'expression et calcule la valeur de la fonction
}
#calcul de la derivee nieme en a
derv = 0
h = 1e-6
for(i in 0:n){
derv = derv + ((-1)^i * combinaison(i, n) * f(a + (n-i)*h)) / h^n  #derivee d'ordre n
}
return(derv)
}
taylor('cos(x)', n=6, a=3, x=3.14)
f_n_deriv <- function(func, n = 0, a = 0)
{
#derivee a l'ordre n au point a
#fonction f à deriver
f <- function(x)
{
#If you use gsub('x', 5, 'exp(x)'), it will replace all the ‘x’ in the string, including the one in ‘exp’.
#So, ‘exp(x)’ would become ‘e5p(5)’, which is not what you want.
#On the other hand, if you use `gsub(‘\bx\b’, 5, ‘exp(x)’), it will only replace the ‘x’ that
#is a whole word (i.e., it is not preceded or followed by another alphabetical character).
#So, ‘exp(x)’ will become ‘exp(5)’
exp <- gsub('\\bx\\b', x, func)  #remplace tous les x dans l'expression par la valeur de x
return(eval(parse(text = exp)))   #evalue l'expression et calcule la valeur de la fonction
}
#calcul de la derivee nieme en a
derv = 0
h = 0.001
for(i in 0:n){
derv = derv + ((-1)^i * combinaison(i, n) * f(a + (n-i)*h)) / h^n  #derivee d'ordre n
}
return(derv)
}
taylor('cos(x)', n=6, a=3, x=3.14)
taylor('cos(x)', n=6, a=3, x=3.14, pol=TRUE)
h = 0.01
f_n_deriv <- function(func, n = 0, a = 0)
{
#derivee a l'ordre n au point a
#fonction f à deriver
f <- function(x)
{
#If you use gsub('x', 5, 'exp(x)'), it will replace all the ‘x’ in the string, including the one in ‘exp’.
#So, ‘exp(x)’ would become ‘e5p(5)’, which is not what you want.
#On the other hand, if you use `gsub(‘\bx\b’, 5, ‘exp(x)’), it will only replace the ‘x’ that
#is a whole word (i.e., it is not preceded or followed by another alphabetical character).
#So, ‘exp(x)’ will become ‘exp(5)’
exp <- gsub('\\bx\\b', x, func)  #remplace tous les x dans l'expression par la valeur de x
return(eval(parse(text = exp)))   #evalue l'expression et calcule la valeur de la fonction
}
#calcul de la derivee nieme en a
derv <-  0
h <-  0.01
for(i in 0:n){
derv = derv + ((-1)^i * combinaison(i, n) * f(a + (n-i)*h)) / h^n  #derivee d'ordre n
}
return(derv)
}
#use derivatives and polynomials
taylor <- function(func, x=0, n = 0, a = 0, pol=FALSE){
k <-  0
taylor <-  0
polynomial <- c()
while (f_n_deriv(func, n=k, a=a) != Inf & f_n_deriv(func, n=k, a=a) != -Inf & k<=n)
{
if(!pol){
taylor <-  taylor +  (f_n_deriv(func, n=k, a=a) * ((x-a)^k))/factorial(k)
}
else{
polynomial <- polyadd(polynomial, f_n_deriv(func, n=k, a=a) * (polypow(c(1, -a),k))/factorial(k))
}
k <- k+1
}
if(!pol){
return(taylor)
}
else{
return(polynomial)
}
}
taylor('cos(x)', n=6, a=3, x=3.14, pol=TRUE)
polyprint(taylor('cos(x)', n=6, a=3, x=3.14, pol=TRUE))
polyprint(taylor('cos(x)', n=6, a=3, x=3.14))
#'
#' @param p  A coefficient vector representing the first polynomial
#' @param n   A coefficient vector representing the first polynomial
#'
#' @return
#' @export
#'
#' @examples
#' polypow(c(1, 0, -1), 3)
#' polyprint(polypow(c(1, 1), 2))
polypow <- function(p, n=1){
pow <- 1
for(i in 1:n)
{
pow <- polymul(pow, p)
}
return(pow)
}
#' performs the multiplication of two polynomials represented by coefficient vectors
#' @param p A coefficient vector representing the first polynomial
#' @param q A coefficient vector representing the second polynomial
#'
#' @return A coefficient vector representing the resulting polynomial from the multiplication
#' @export
#'
#' @examples
#' polymul(c(1, 0, -1), c(3, 0, 1, 5))
#' polyprint(polymul(c(1, 3), c(4, 5)))
polymul <- function(p, q)
{
lp <- length(p)
lq <- length(q)
mul<- c(rep(0, lp+lq))
for(i in 1:lp)
{
for(j in 1:lq)
{
index <- i + j
mul[index] <- mul[index] + p[i] * q[j]
}
}
return(mul[2:(lp+lq)])
}
#' performs the multiplication of two polynomials represented by coefficient vectors
#' @param p A coefficient vector representing the first polynomial
#' @param q A coefficient vector representing the second polynomial
#'
#' @return A coefficient vector representing the resulting polynomial from the multiplication
#' @export
#'
#' @examples
#' polymul(c(1, 0, -1), c(3, 0, 1, 5))
#' polyprint(polymul(c(1, 3), c(4, 5)))
polymul <- function(p, q)
{
lp <- length(p)
lq <- length(q)
mul<- c(rep(0, lp+lq))
for(i in 1:lp)
{
for(j in 1:lq)
{
index <- i + j
mul[index] <- mul[index] + p[i] * q[j]
}
}
return(mul[2:(lp+lq)])
}
#' Performs the addition of two polynomials represented by coefficient vectors
#' @param p A coefficient vector representing the first polynomial
#' @param q A coefficient vector representing the second polynomial
#'
#' @return A coefficient vector representing the resulting polynomial from the addition
#' @export
#'
#' @examples
#' polyadd(c(1, 0, -1), c(1, 0, 3, 5)) #output: c(1, 1, 3, 4)
#' polyprint(polyadd(c(1, 2, 3), c(4, 5, 6)))
polyadd <- function(p, q)
{
lp <- length(p)
lq <- length(q)
if(lp > lq){
q <- c(rep(0, times=lp-lq), q)
}
if(lp < lq){
p <- c(rep(0, times=lq-lp), p)
}
return(p+q)
}
#' Print polynomials
#' Returns a string representation of the polynomial
#' @param pol A coefficient vector representing the polynomial
#'
#' @return A string representation of the polynomial represented by \code{pol}
#' @export
#'
#' @examples
#' polyprint(c(-1, 0, 1, 0)) #output: "-x^3 + x"
#' polyprint(c(2, 0, 1)) #output: "2 * x^3 + x"
polyprint <- function(pol){
if(length(pol) == 0){
return("Le polynome n'est pas defini")
}
p <- round(pol, digits = 5)  #round to five deciaml places
lp <- length(p)
polynomial <- ''
if(length(p) == 1){
return(p)
}
for(i in 1:lp){
if(p[i] < 0 & p[i] != -1){
polynomial <- paste(polynomial, ' - ', -p[i], ifelse(i!=lp,paste('* x',
ifelse(i!=lp-1, paste('^', lp-i), '')), ''))
}
if(p[i] == -1){
polynomial <- paste(polynomial, ' - ', ifelse(i!=lp,paste('x',
ifelse(i!=lp-1, paste('^', lp-i), '')), -p[i]))
}
if(p[i] == 0){
polynomial <- polynomial
}
if(p[i] > 0 & p[i] != 1){
polynomial <- paste(polynomial, ifelse(i==1, '', ' + '), p[i], ifelse(i!=lp,paste('* x',
ifelse(i!=lp-1, paste('^', lp-i), '')), ''))
}
if(p[i] == 1){
polynomial <- paste(polynomial, ifelse(i==1, '', ' + '), ifelse(i!=lp,paste('x',
ifelse(i!=lp-1, paste('^', lp-i), '')), p[i]))
}
}
return(polynomial)
}
polyprint(taylor('cos(x)', n=6, a=3, x=3.14))
polyprint(taylor('cos(x)', n=6, a=3, x=3.14, pol=TRUE))
polyprint(taylor('cos(x)', n=9, a=3, x=3.14))
polyprint(taylor('log(x)', n=9, a=3, x=2.7182))
rm(list=ls())
combinaison <- function(k, n)
{
if(k <= n){
return(factorial(n) / (factorial(k) * factorial(n-k)))
}
else{
return(0)
}
}
f <- function(func, x)
{
#If you use gsub('x', 5, 'exp(x)'), it will replace all the ‘x’ in the string, including the one in ‘exp’.
#So, ‘exp(x)’ would become ‘e5p(5)’, which is not what you want.
#On the other hand, if you use `gsub(‘\bx\b’, 5, ‘exp(x)’), it will only replace the ‘x’ that
#is a whole word (i.e., it is not preceded or followed by another alphabetical character).
#So, ‘exp(x)’ will become ‘exp(5)’
exp <- gsub('\\bx\\b', x, func)  #remplace tous les x dans l'expression par la valeur de x
return(eval(parse(text = exp)))   #evalue l'expression et calcule la valeur de la fonction
}
f_n_deriv <- function(func, n = 0, a = 0)
{
#derivee a l'ordre n au point a
#fonction f à deriver
f <- function(x)
{
#If you use gsub('x', 5, 'exp(x)'), it will replace all the ‘x’ in the string, including the one in ‘exp’.
#So, ‘exp(x)’ would become ‘e5p(5)’, which is not what you want.
#On the other hand, if you use `gsub(‘\bx\b’, 5, ‘exp(x)’), it will only replace the ‘x’ that
#is a whole word (i.e., it is not preceded or followed by another alphabetical character).
#So, ‘exp(x)’ will become ‘exp(5)’
exp <- gsub('\\bx\\b', x, func)  #remplace tous les x dans l'expression par la valeur de x
return(eval(parse(text = exp)))   #evalue l'expression et calcule la valeur de la fonction
}
#calcul de la derivee nieme en a
derv <-  0
h <-  0.01
for(i in 0:n){
derv = derv + ((-1)^i * combinaison(i, n) * f(a + (n-i)*h)) / h^n  #derivee d'ordre n
}
return(derv)
}
f_n_deriv('x^3', n=2, a=1)
f_n_deriv('x^3', n=5, a=1)
polyprint <- function(pol){
if(length(pol) == 0){
return("Le polynome n'est pas defini")
}
p <- round(pol, digits = 5)  #round to five deciaml places
lp <- length(p)
polynomial <- ''
if(length(p) == 1){
return(p)
}
for(i in 1:lp){
if(p[i] < 0 & p[i] != -1){
polynomial <- paste(polynomial, ' - ', -p[i], ifelse(i!=lp,paste('* x',
ifelse(i!=lp-1, paste('^', lp-i), '')), ''))
}
if(p[i] == -1){
polynomial <- paste(polynomial, ' - ', ifelse(i!=lp,paste('x',
ifelse(i!=lp-1, paste('^', lp-i), '')), -p[i]))
}
if(p[i] == 0){
polynomial <- polynomial
}
if(p[i] > 0 & p[i] != 1){
polynomial <- paste(polynomial, ifelse(i==1, '', ' + '), p[i], ifelse(i!=lp,paste('* x',
ifelse(i!=lp-1, paste('^', lp-i), '')), ''))
}
if(p[i] == 1){
polynomial <- paste(polynomial, ifelse(i==1, '', ' + '), ifelse(i!=lp,paste('x',
ifelse(i!=lp-1, paste('^', lp-i), '')), p[i]))
}
}
return(polynomial)
}
polyadd <- function(p, q)
{
lp <- length(p)
lq <- length(q)
if(lp > lq){
q <- c(rep(0, times=lp-lq), q)
}
if(lp < lq){
p <- c(rep(0, times=lq-lp), p)
}
return(p+q)
}
polymul <- function(p, q)
{
lp <- length(p)
lq <- length(q)
mul<- c(rep(0, lp+lq))
for(i in 1:lp)
{
for(j in 1:lq)
{
index <- i + j
mul[index] <- mul[index] + p[i] * q[j]
}
}
return(mul[2:(lp+lq)])
}
polypow <- function(p, n=1){
pow <- 1
for(i in 1:n)
{
pow <- polymul(pow, p)
}
return(pow)
}
taylor
#use derivatives and polynomials
taylor <- function(func, x=0, n = 0, a = 0, pol=FALSE){
k <-  0
taylor <-  0
polynomial <- c()
while (f_n_deriv(func, n=k, a=a) != Inf & f_n_deriv(func, n=k, a=a) != -Inf & k<=n)
{
if(!pol){
taylor <-  taylor +  (f_n_deriv(func, n=k, a=a) * ((x-a)^k))/factorial(k)
}
else{
polynomial <- polyadd(polynomial, f_n_deriv(func, n=k, a=a) * (polypow(c(1, -a),k))/factorial(k))
}
k <- k+1
}
if(!pol){
return(taylor)
}
else{
return(polynomial)
}
}
polyprint(taylor('log(x)', n=9, a=3, x=2.7182))
polyprint(taylor('log(x)', n=9, a=3, x=2.7182, pol=TRUE))
polyprint(taylor('log(x)', n=2, a=3, x=2.7182, pol=TRUE))
polyprint(taylor('log(x)', n=0, a=3, x=2.7182, pol=TRUE))
taylor('log(x)', n=0, a=3, x=2.7182, pol=TRUE)
devtools::check()
getwd()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check(args="--no-check-timestamps")
rm(list = c("combinaison", "f", "f_n_deriv", "polyadd", "polymul", "polypow",
"polyprint"))
devtools::check(args="--no-check-timestamps")
devtools::check(args="--no-check-timestamps")
library(numa)
library(numa)
?numa::polypow
numa::polyprint(c(1, 0, 1))
?numa::taylor
numa::taylor("sin(x)", n=2, a=3, pol = TRUE)
numa::taylor("sin(x)", n=2, a=0, pol = TRUE)
numa::taylor("cos(x)", n=2, a=0, pol = TRUE)
polyprint(numa::taylor("cos(x)", n=2, a=0, pol = TRUE))
a <- polyprint(numa::taylor("cos(x)", n=2, a=0, pol = TRUE))
f(a, 0)
install.packages("F:/Introduction à R/numa")
